Q.1)
import java.util.*;

public class BFSExample {

   
    public static void bfs(int start, List<List<Integer>> adj, boolean[] visited) {
        Queue<Integer> queue = new LinkedList<>();
        
        
        visited[start] = true;
        queue.offer(start);
        
        System.out.print("BFS Traversal: ");
        
        while (!queue.isEmpty()) {
            int node = queue.poll(); 
            System.out.print(node + " ");
            
            
            for (int neighbor : adj.get(node)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true; 
                    queue.offer(neighbor);    
                }
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        
        System.out.print("Enter the number of vertices: ");
        int V = scanner.nextInt();
        System.out.print("Enter the number of edges: ");
        int E = scanner.nextInt();

       
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        System.out.println("Enter the edges (u v):");
        for (int i = 0; i < E; i++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            adj.get(u).add(v); 
            adj.get(v).add(u); 
        }

        
        boolean[] visited = new boolean[V];

        
        System.out.println("Starting BFS traversal from vertex 0:");
        bfs(0, adj, visited);

        scanner.close();
    }
}


Q.2)
import java.util.Scanner;

public class StrassenMatrixMultiplication {

    
    public static int[][] strassenMultiply(int[][] A, int[][] B) {
        int[][] result = new int[2][2];

        
        int M1 = (A[0][0] + A[1][1]) * (B[0][0] + B[1][1]);
        int M2 = (A[1][0] + A[1][1]) * B[0][0];
        int M3 = A[0][0] * (B[0][1] - B[1][1]);
        int M4 = A[1][1] * (B[1][0] - B[0][0]);
        int M5 = (A[0][0] + A[0][1]) * B[1][1];
        int M6 = (A[1][0] - A[0][0]) * (B[0][0] + B[0][1]);
        int M7 = (A[0][1] - A[1][1]) * (B[1][0] + B[1][1]);

        
        result[0][0] = M1 + M4 - M5 + M7;
        result[0][1] = M3 + M5;
        result[1][0] = M2 + M4;
        result[1][1] = M1 - M2 + M3 + M6;

        return result;
    }

   
    public static int[][] readMatrix(Scanner scanner, String name) {
        int[][] matrix = new int[2][2];
        System.out.println("Enter elements of matrix " + name + " (2x2):");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }
        return matrix;
    }

   
    public static void printMatrix(int[][] matrix, String name) {
        System.out.println("Matrix " + name + ":");
        for (int[] row : matrix) {
            for (int val : row)
                System.out.print(val + " ");
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        
        int[][] A = readMatrix(scanner, "A");
        int[][] B = readMatrix(scanner, "B");

       
        int[][] C = strassenMultiply(A, B);

        // Print result
        printMatrix(A, "A");
        printMatrix(B, "B");
        printMatrix(C, "A x B (Strassen Result)");

        scanner.close();
    }
}

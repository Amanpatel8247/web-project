Q.1)
import java.util.Scanner;

public class MatrixSum {

    
    public static void rowSum(int[][] matrix) {
        System.out.println("Row sums:");
        for (int i = 0; i < 3; i++) {
            int sum = 0;
            for (int j = 0; j < 3; j++) {
                sum += matrix[i][j];
            }
            System.out.println("Row " + (i + 1) + " sum: " + sum);
        }
    }

   
    public static void columnSum(int[][] matrix) {
        System.out.println("Column sums:");
        for (int j = 0; j < 3; j++) {
            int sum = 0;
            for (int i = 0; i < 3; i++) {
                sum += matrix[i][j];
            }
            System.out.println("Column " + (j + 1) + " sum: " + sum);
        }
    }

    
    public static void diagonalSum(int[][] matrix) {
        int mainDiagonalSum = 0;
        int secondaryDiagonalSum = 0;

        for (int i = 0; i < 3; i++) {
            mainDiagonalSum += matrix[i][i]; 
            secondaryDiagonalSum += matrix[i][2 - i];  bottom-left)
        }

        System.out.println("Main diagonal sum: " + mainDiagonalSum);
        System.out.println("Secondary diagonal sum: " + secondaryDiagonalSum);
    }

  
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[][] matrix = new int[3][3];

        
        System.out.println("Enter the elements of the 3x3 matrix:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }

      
        rowSum(matrix);
        columnSum(matrix);
        diagonalSum(matrix);

        sc.close();
    }
}


Q.2)
import java.util.*;

public class OptimalMergePattern {

    
    public static int optimalMerge(int[] files) {
       
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
       
        for (int file : files) {
            minHeap.add(file);
        }

        int totalCost = 0;

       
        while (minHeap.size() > 1) {
          
            int first = minHeap.poll();
            int second = minHeap.poll();

           
            int mergeCost = first + second;
            totalCost += mergeCost;

            
            minHeap.add(mergeCost);
        }

        return totalCost;
    }

    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

       
        System.out.print("Enter the number of files: ");
        int n = scanner.nextInt();

        
        int[] files = new int[n];
        System.out.println("Enter the sizes of the files:");
        for (int i = 0; i < n; i++) {
            files[i] = scanner.nextInt();
        }

       
        int minCost = optimalMerge(files);

        
        System.out.println("The minimum cost to merge all files is: " + minCost);
        
        scanner.close();
    }
}


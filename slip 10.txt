Q.1)
import java.util.Scanner;

public class LCMExample {

    
    public static int gcd(int a, int b) {
        if (b == 0)
            return a;
        else
            return gcd(b, a % b);
    }

    
    public static int lcm(int a, int b) {
        return (a * b) / gcd(a, b);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

       
        System.out.print("Enter first number: ");
        int num1 = scanner.nextInt();

        System.out.print("Enter second number: ");
        int num2 = scanner.nextInt();

       
        int result = lcm(num1, num2);
        System.out.println("LCM of " + num1 + " and " + num2 + " is: " + result);

        scanner.close();
    }
}

Q.2)
import java.util.*;

public class FractionalKnapsack {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        
        System.out.print("Enter the number of items: ");
        int n = scanner.nextInt();
        int[] weights = new int[n];
        int[] profits = new int[n];
        double[] ratios = new double[n];

        
        System.out.println("Enter weight and profit of each item:");
        for (int i = 0; i < n; i++) {
            System.out.print("Item " + (i + 1) + " - Weight: ");
            weights[i] = scanner.nextInt();
            System.out.print("Item " + (i + 1) + " - Profit: ");
            profits[i] = scanner.nextInt();
            ratios[i] = (double) profits[i] / weights[i]; // Calculate profit/weight ratio
        }

      
        System.out.print("Enter capacity of the knapsack: ");
        int capacity = scanner.nextInt();

       
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (ratios[i] < ratios[j]) {
                   
                    double temp = ratios[i];
                    ratios[i] = ratios[j];
                    ratios[j] = temp;
                   
                    int tempWeight = weights[i];
                    weights[i] = weights[j];
                    weights[j] = tempWeight;

                    int tempProfit = profits[i];
                    profits[i] = profits[j];
                    profits[j] = tempProfit;
                }
            }
        }

       
        double totalProfit = 0.0;
        int currentWeight = 0;
        for (int i = 0; i < n; i++) {
            if (currentWeight + weights[i] <= capacity) {
               
                currentWeight += weights[i];
                totalProfit += profits[i];
            } else {
               
                int remainingCapacity = capacity - currentWeight;
                totalProfit += ratios[i] * remainingCapacity;
                break; 
            }
        }

        
        System.out.printf("Maximum Profit = %.2f\n", totalProfit);

        scanner.close();
    }
}
